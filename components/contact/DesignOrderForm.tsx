'use client'

import React, { ChangeEvent, FormEvent, useState } from 'react'
import { toast } from 'sonner'
import './style.css'


interface FormData {
  designType: string
  customDesignType: string
  designText: string
  color: string
  designElements: string
  width: number | null
  height: number | null
  fileSize: string
  additionalInfo: string
  telegramUsername: string
}

interface Errors {
  designType?: string
  designText?: string
  color?: string
  designElements?: string
  size?: string
  additionalInfo?: string
  telegramUsername?: string
}

const DesignOrderForm: React.FC = () => {
  const [formData, setFormData] = useState<FormData>({
    designType: '',
    customDesignType: '',
    designText: '',
    color: '',
    designElements: '',
    width: null,
    height: null,
    fileSize: '',
    additionalInfo: '',
    telegramUsername: '',
  })

  const [isDropdownOpen, setIsDropdownOpen] = useState<boolean>(false)
  const [errors, setErrors] = useState<Errors>({})

  const [chatId, setChatId] = useState<string | null>(null)
  const [chatIdError, setChatIdError] = useState<string | null>(null)

  const BOT_TOKEN = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN
  const CHAT_ID = 1832735702
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/getUpdates`

  // chat id
  async function fetchChatId() {
    try {
      const res = await fetch(url)
      const data = await res.json()

      if (data.ok && data.result.length > 0) {
        const latestUpdate = data.result[data.result.length - 1]
        const chatId = latestUpdate.message?.chat.id

        if (chatId) {
          setChatId(chatId.toString())
        } else {
          setChatIdError('Chat ID not found')
        }
      } else {
        setChatIdError('Xabar topilmadi')
      }
    } catch (error) {
      setChatIdError('Xabar topilmadi')
      console.error('Error fetching chat ID:', error)
    }
  }
  fetchChatId()

  const designTypes = [
    '–ê–≤–∞—Ç–∞—Ä–∫–∞',
    '–§–æ—Ä—É–º–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–µ–º—ã',
    '–ö–ª–∏–ø –ø–æ–¥ –º—É–∑—ã–∫—É',
    '–ø—Ä–æ–º–æ-—Ä–æ–ª–∏–∫',
    '–ë–∞–Ω–Ω–µ—Ä',
    '–õ–æ–≥–æ—Ç–∏–ø',
    '–î—Ä—É–≥–æ–µ',
  ]

  const handleInputChange = (
    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target
    setFormData((prevState) => ({
      ...prevState,
      [name]: value,
    }))
    if (errors[name as keyof Errors]) {
      setErrors((prevErrors) => ({ ...prevErrors, [name as keyof Errors]: '' }))
    }
  }

  const handleDesignTypeSelect = (type: string) => {
    setFormData((prevState) => ({ ...prevState, designType: type }))
    setIsDropdownOpen(false)
    if (errors.designType) {
      setErrors((prevErrors) => ({ ...prevErrors, designType: '' }))
    }
  }

  const validateForm = (): boolean => {
    const newErrors: Errors = {}
    if (!formData.designType) newErrors.designType = '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'
    if (!formData.designText) newErrors.designText = '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'
    if (!formData.color) newErrors.color = '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'
    if (!formData.designElements) newErrors.designElements = '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'
    if (!formData.width || !formData.height)
      newErrors.size = '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'
    if (!formData.additionalInfo) newErrors.additionalInfo = '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'
    if (!formData.telegramUsername)
      newErrors.telegramUsername = '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'
    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const sendToTelegramBot = async () => {
    const message = `
    üâê–ù–û–í–´–ô –ó–ê–ö–ê–ó –î–ò–ó–ê–ô–ù–êüâê:


    –¢–ò–ü –î–ò–ó–ê–ô–ù–ê: ${
      formData.designType === '–î—Ä—É–≥–æ–µ'
        ? formData.customDesignType
        : formData.designType
    }
   
    –¢–ï–ö–°–¢: ${formData.designText}
    
    –¶–í–ï–¢: ${formData.color}
    
    –≠–õ–ï–ú–ï–ù–¢–´ –î–ò–ó–ê–ô–ù–ê: ${formData.designElements}
    
    –†–ê–ó–ú–ï–†: ${formData.width}x${formData.height}
    
    –†–ê–ó–ú–ï–† –§–ê–ô–õ–ê: ${formData.fileSize || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
    
    –î–û–ü –ò–ù–§–û–†–ú–ê–¶–ò–Ø: ${formData.additionalInfo}
    
    Telegram: ${formData.telegramUsername}
  `
    


    try {
      const response = await fetch(
        `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chat_id: CHAT_ID,
            text: message,
          }),
        }
      )

      if (!response.ok) {
        throw new Error('Failed to send message to Telegram')
      }

      toast.success('–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
    } catch (error) {
      console.error('Error:', error)
      toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')
    }
  }

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    if (validateForm()) {
      sendToTelegramBot()
      setFormData({
        designType: '',
        customDesignType: '',
        designText: '',
        color: '',
        designElements: '',
        width: null,
        height: null,
        fileSize: '',
        additionalInfo: '',
        telegramUsername: '',
      })
    } else {
      toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.')
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="max-w-full mx-auto mt-10 p-6 bg-[#191919] rounded-lg shadow-xl"
    >
      <h2 className="text-2xl font-bold mb-6 text-white">–§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ –¥–∏–∑–∞–π–Ω–∞</h2>

      <div className="dropdown mb-4 relative">
        <button
          type="button"
          onClick={() => setIsDropdownOpen(!isDropdownOpen)}
          className="w-full p-2 border rounded text-left bg-[#222222] text-white border-none"
        >
          {formData.designType || '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–∑–∞–π–Ω–∞'}
        </button>
        {isDropdownOpen && (
          <div className="dropdown-content absolute left-0 right-0 bg-[#222222] text-white border-none border rounded">
            {designTypes.map((type, index) => (
              <a
                key={index}
                href="#"
                onClick={() => handleDesignTypeSelect(type)}
                className="block p-2 hover:bg-gray-100"
              >
                {type}
              </a>
            ))}
          </div>
        )}
        {errors.designType && (
          <p className="text-red-500 text-sm mt-1">{errors.designType}</p>
        )}
      </div>

      {formData.designType === '–î—Ä—É–≥–æ–µ' && (
        <input
          type="text"
          name="customDesignType"
          value={formData.customDesignType}
          onChange={handleInputChange}
          placeholder="–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
          className="w-full p-2 border rounded mt-2 mb-4 bg-[#222222] text-white border-none"
        />
      )}

      <input
        type="text"
        name="designText"
        value={formData.designText}
        onChange={handleInputChange}
        placeholder="–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–∏–∑–∞–π–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ"
        className="w-full p-2 border rounded mb-4 bg-[#222222] text-white border-none"
      />
      {errors.designText && (
        <p className="text-red-500 text-sm mt-1">{errors.designText}</p>
      )}

      <input
        type="text"
        name="color"
        value={formData.color}
        onChange={handleInputChange}
        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞"
        className="w-full p-2 border rounded mb-4 bg-[#222222] text-white border-none"
      />
      {errors.color && (
        <p className="text-red-500 text-sm mt-1">{errors.color}</p>
      )}

      <input
        type="text"
        name="designElements"
        value={formData.designElements}
        onChange={handleInputChange}
        placeholder="–≠–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—à–∏–Ω–∞ –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂)"
        className="w-full p-2 border rounded mb-4 bg-[#222222] text-white border-none"
      />
      {errors.designElements && (
        <p className="text-red-500 text-sm mt-1">{errors.designElements}</p>
      )}


<div className="flex mb-4">
        <input
          type="text"
          name="width"
          value={formData.width || ''}
          onChange={handleInputChange}
          placeholder="–®–∏—Ä–∏–Ω—É —Ç–æ–º–∞ (px , sm , vh)"
          className="w-1/2 p-2 border rounded mr-2 bg-[#222222] text-white border-none"
        />
        <input
          type="text"
          name="height"
          value={formData.height || ''}
          onChange={handleInputChange}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É (px , sm , vh)"
          className="w-1/2 p-2 border rounded bg-[#222222] text-white border-none"
        />
      </div>
      {errors.size && (
        <p className="text-red-500 text-sm mt-1 ">{errors.size}</p>
      )}

      <input
        type="text"
        name="fileSize"
        value={formData.fileSize}
        onChange={handleInputChange}
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–ú–ë, –ì–ë, –¢–ë)  (–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –µ–≥–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å.)"
        className="w-full p-2 border rounded mb-4 bg-[#222222] text-white border-none"
      />

      <textarea
        name="additionalInfo"
        value={formData.additionalInfo}
        onChange={handleInputChange}
        placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ —Å–æ–≤–µ—Ç—ã"
        className="w-full p-2 border rounded mb-4 bg-[#222222] text-white border-none"
        rows={4}
      />
      {errors.additionalInfo && (
        <p className="text-red-500 text-sm mt-1">{errors.additionalInfo}</p>
      )}

      <input
        type="text"
        name="telegramUsername"
        value={formData.telegramUsername}
        onChange={handleInputChange}
        placeholder="–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π (username) –¥–ª—è —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ Telegram"
        className="w-full p-2 border rounded mb-4 bg-[#222222] text-white border-none"
      />
      {errors.telegramUsername && (
        <p className="text-red-500 text-sm mt-1">{errors.telegramUsername}</p>
      )}

      <button
        type="submit"
        className="w-full bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 transition duration-300 bg-[#E32879]"
      >
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
      </button>
    </form>
  )
}

export default DesignOrderForm